import os
import time
import math
import numpy as np
from PIL import Image
from openpyxl import Workbook, load_workbook
from openpyxl.drawing.image import Image as XLImage


class DrawingMetricsLogger:
    def __init__(self, save_folder, excel_filename="Results.xlsx"):
        """
        Initialize the metrics logger.

        Args:
            save_folder (str): Path to the folder where images and Excel file will be saved
            excel_filename (str): Name of the Excel file to store results
        """
        self.save_folder = save_folder
        self.excel_path = os.path.join(save_folder, excel_filename)

    def calculate_metrics(self, pen_positions, pen_timestamps, pressure_readings,
                          start_time, end_time, air_time, paper_time, pendown_count):
        """
        Calculate all drawing metrics from the collected data.

        Args:
            pen_positions (list): List of (x, y) pen positions
            pen_timestamps (list): List of timestamps for each position
            pressure_readings (list): List of pressure values
            start_time (float): Start time of drawing
            end_time (float): End time of drawing
            air_time (float): Total time pen was in air
            paper_time (float): Total time pen was on paper
            pendown_count (int): Number of times pen was pressed down

        Returns:
            dict: Dictionary containing all calculated metrics
        """
        total_time = (end_time - start_time) if start_time else 0

        # Calculate distances, speeds, and accelerations
        distances, speeds, accelerations = self._calculate_kinematics(pen_positions, pen_timestamps)

        # Basic metrics
        mean_speed = np.mean(speeds) if speeds else 0
        mean_acceleration = np.mean(accelerations) if accelerations else 0
        mean_pressure = np.mean(pressure_readings) if pressure_readings else 0
        pressure_variance = np.var(pressure_readings) if pressure_readings else 0

        # Spatial metrics
        max_x, max_y = self._calculate_spatial_extent(pen_positions)

        # Advanced metrics
        gmrtp = self._calculate_gmrtp(distances, total_time)
        mean_jerk = self._calculate_mean_jerk(accelerations, pen_timestamps)
        avg_cisp = self._calculate_average_cisp(pen_positions)

        return {
            'total_time': total_time,
            'air_time': air_time,
            'paper_time': paper_time,
            'mean_speed': mean_speed,
            'mean_acceleration': mean_acceleration,
            'mean_pressure': mean_pressure,
            'pressure_variance': pressure_variance,
            'pendown_count': pendown_count,
            'max_x': max_x,
            'max_y': max_y,
            'gmrtp': gmrtp,
            'mean_jerk': mean_jerk,
            'avg_cisp': avg_cisp
        }

    def _calculate_kinematics(self, pen_positions, pen_timestamps):
        """Calculate distances, speeds, and accelerations from pen positions."""
        distances, speeds, accelerations = [], [], []

        if len(pen_positions) > 1:
            for i in range(1, len(pen_positions)):
                dx = pen_positions[i][0] - pen_positions[i - 1][0]
                dy = pen_positions[i][1] - pen_positions[i - 1][1]
                dist = math.hypot(dx, dy)
                dt = pen_timestamps[i] - pen_timestamps[i - 1]

                if dt > 0:
                    speed = dist / dt
                    distances.append(dist)
                    speeds.append(speed)

            if len(speeds) > 1:
                for i in range(1, len(speeds)):
                    delta_t = pen_timestamps[i] - pen_timestamps[i - 1]
                    if delta_t > 0:
                        acc = (speeds[i] - speeds[i - 1]) / delta_t
                        accelerations.append(acc)

        return distances, speeds, accelerations

    def _calculate_spatial_extent(self, pen_positions):
        """Calculate the spatial extent of the drawing."""
        if pen_positions:
            x_vals, y_vals = zip(*pen_positions)
            max_x = max(x_vals) - min(x_vals)
            max_y = max(y_vals) - min(y_vals)
        else:
            max_x = max_y = 0
        return max_x, max_y

    def _calculate_gmrtp(self, distances, total_time):
        """Calculate Geometric Mean Radial Trajectory Point (GMRTP)."""
        return (sum(distances) / total_time) if total_time else 0

    def _calculate_mean_jerk(self, accelerations, pen_timestamps):
        """Calculate mean jerk (rate of change of acceleration)."""
        jerks = []
        for i in range(len(accelerations) - 1):
            if i + 2 < len(pen_timestamps):
                dt = pen_timestamps[i + 2] - pen_timestamps[i + 1]
                if dt > 0:
                    jerk = (accelerations[i + 1] - accelerations[i]) / dt
                    jerks.append(jerk)
        return np.mean(jerks) if jerks else 0

    def _calculate_average_cisp(self, pen_positions):
        """Calculate average Curvature Index of Stroke Path (CISP)."""
        cisp_values = []
        if len(pen_positions) >= 3:
            for i in range(1, len(pen_positions) - 1):
                A = np.array(pen_positions[i - 1])
                B = np.array(pen_positions[i])
                C = np.array(pen_positions[i + 1])

                v1 = B - A
                v2 = C - B
                norm_v1, norm_v2 = np.linalg.norm(v1), np.linalg.norm(v2)

                if norm_v1 == 0 or norm_v2 == 0:
                    continue

                cosine_angle = np.clip(np.dot(v1, v2) / (norm_v1 * norm_v2), -1, 1)
                angle = math.acos(cosine_angle)
                d_sum = norm_v1 + norm_v2
                cisp = abs(angle) / d_sum if d_sum != 0 else 0
                cisp_values.append(cisp)

        return np.mean(cisp_values) if cisp_values else 0

    def calculate_dispersion_index(self, processed_image_path):
        """Calculate dispersion index from processed image."""
        img = Image.open(processed_image_path).convert("L")
        img_array = np.array(img)
        return np.count_nonzero(img_array < 255) / img_array.size

    def process_and_save_image(self, drawing_pixmap, player_name, session_id,level):
        """
        Process the drawing image and save both processed and thumbnail versions.

        Args:
            drawing_pixmap: QPixmap object containing the drawing
            player_name (str): Name of the player
            session_id (int): Session ID for unique naming

        Returns:
            tuple: (processed_image_path, excel_image_path)
        """
        if not os.path.exists(self.save_folder):
            os.makedirs(self.save_folder)

        suffix = f"_{session_id}"
        processed_path = os.path.join(self.save_folder, f"{player_name}_{level}_{suffix}.png")
        excel_img_path = os.path.join(self.save_folder, f"{player_name}_{level}_excel{suffix}.png")
        temp_path = os.path.join(self.save_folder, "temp.png")

        # Save current drawing pixmap temporarily
        drawing_pixmap.save(temp_path)

        # Process image (grayscale, standardize, rescale)
        gray = Image.open(temp_path).convert('L')
        img_array = np.array(gray).astype(np.float32)
        normalized = img_array / 255.0
        mean = normalized.mean()
        std = normalized.std() or 1
        standardized = (normalized - mean) / std
        rescaled = ((standardized - standardized.min()) /
                    (standardized.max() - standardized.min()) * 255).astype(np.uint8)
        Image.fromarray(rescaled).save(processed_path)

        # Create thumbnail for Excel
        thumbnail_img = Image.open(processed_path)
        thumbnail_img.thumbnail((150, 75), Image.LANCZOS)
        thumbnail_img.save(excel_img_path)

        # Clean up temp file
        os.remove(temp_path)

        return processed_path, excel_img_path

    def initialize_excel_file(self):
        """Initialize Excel file with headers if it doesn't exist."""
        if not os.path.exists(self.excel_path):
            wb = Workbook()
            ws = wb.active
            ws.title = "Results"
            headers = [
                "Player Name", "Processed Image", "Level",
                "Total Time", "Air Time", "Paper Time",
                "Mean Speed", "Mean Acceleration",
                "Mean Pressure", "Pressure Variance",
                "Pendown Count", "Max X", "Max Y",
                "GMRTP", "Mean Jerk", "Dispersion Index", "Average CISP",
                "Risk Level", "Interpretation"  # Added Parkinson's detection columns
            ]
            ws.append(headers)
            wb.save(self.excel_path)

    def get_next_session_id(self, player_name):
        """Get the next session ID for a player."""
        if not os.path.exists(self.excel_path):
            return 1

        wb = load_workbook(self.excel_path)
        ws = wb["Results"]

        existing_entries = [cell.value for cell in ws['A'] if cell.value == player_name]
        return len(existing_entries) + 1

    def save_to_excel(self, player_name, level, metrics, processed_image_path, excel_image_path, prediction_result=None):
        """
        Save all metrics and image to Excel file.

        Args:
            player_name (str): Name of the player
            level (str): Level identifier
            metrics (dict): Dictionary of calculated metrics
            processed_image_path (str): Path to processed image
            excel_image_path (str): Path to thumbnail image for Excel
            prediction_result (dict): Optional Parkinson's detection results
        """
        self.initialize_excel_file()

        wb = load_workbook(self.excel_path)
        ws = wb["Results"]

        # Calculate dispersion index
        dispersion_index = self.calculate_dispersion_index(processed_image_path)

        # Prepare row data with Parkinson's detection results
        row_data = [
            player_name, None, level,
            metrics['total_time'], metrics['air_time'], metrics['paper_time'],
            metrics['mean_speed'], metrics['mean_acceleration'],
            metrics['mean_pressure'], metrics['pressure_variance'],
            metrics['pendown_count'], metrics['max_x'], metrics['max_y'],
            metrics['gmrtp'], metrics['mean_jerk'], dispersion_index, metrics['avg_cisp'],
            prediction_result.get('risk_level', '') if prediction_result else '',
            prediction_result.get('interpretation', '') if prediction_result else ''
        ]

        # Add row to worksheet
        row = ws.max_row + 1
        ws.append(row_data)

        try:
            # Format row for image
            ws.row_dimensions[row].height = 60
            ws.column_dimensions['B'].width = 25
            time.sleep(0.1)  # Small delay to ensure file operations complete

            # Add image to Excel
            xl_img = XLImage(excel_image_path)
            xl_img.width = 150
            xl_img.height = 75
            xl_img.anchor = f"B{row}"
            ws.add_image(xl_img)

            wb.save(self.excel_path)

        except Exception as e:
            print(f"Excel insert failed: {e}")
            # Save without image if image insertion fails
            wb.save(self.excel_path)

    def save_complete_session(self, drawing_pixmap, player_name, level,
                              pen_positions, pen_timestamps, pressure_readings,
                              start_time, end_time, air_time, paper_time, pendown_count, prediction_result=None):
        """
        Complete method to process image, calculate metrics, and save everything.

        Args:
            drawing_pixmap: QPixmap object containing the drawing
            player_name (str): Name of the player
            level (str): Level identifier
            pen_positions (list): List of (x, y) pen positions
            pen_timestamps (list): List of timestamps
            pressure_readings (list): List of pressure values
            start_time (float): Start time of drawing
            end_time (float): End time of drawing
            air_time (float): Total air time
            paper_time (float): Total paper time
            pendown_count (int): Number of pen down events
            prediction_result (dict): Optional Parkinson's detection results
        """
        # Get session ID
        session_id = self.get_next_session_id(player_name)

        # Process and save images
        processed_path, excel_img_path = self.process_and_save_image(
            drawing_pixmap, player_name, session_id,level
        )

        # Calculate metrics
        metrics = self.calculate_metrics(
            pen_positions, pen_timestamps, pressure_readings,
            start_time, end_time, air_time, paper_time, pendown_count
        )

        # Save to Excel with prediction results
        self.save_to_excel(player_name, level, metrics, processed_path, excel_img_path, prediction_result)

        return metrics


